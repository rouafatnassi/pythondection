import cv2

# Initialiser la caméra (webcam)
cam = cv2.VideoCapture(0)

# Configurer la taille de l'affichage de la caméra
cam.set(4, 740)  # Largeur
cam.set(5, 580)  # Hauteur

# Charger les noms des classes à partir d'un fichier texte
classNames = []
classeFile = 'coco.names'

# Lire le fichier des noms de classes
with open(classeFile, 'rt') as f:
    classNames = f.read().rstrip('\n').split('\n')
    print(classNames)

# Configurer le modèle de détection
configPath = 'ssd_mobilenet_v3_large_coco_2020_01_14.pbtxt'
weightsPth = 'frozen_inference_graph.pb'

# Initialiser le modèle de détection avec les poids et la configuration
net = cv2.dnn_DetectionModel(weightsPth, configPath)

# Configurer les paramètres d'entrée du modèle
net.setInputSize(320, 230)
net.setInputScale(1.0 / 127.5)
net.setInputMean((127.5, 127.5, 127.5))
net.setInputSwapRB(True)

# Boucle principale pour la détection en temps réel
while True:
    # Lire une image à partir de la caméra
    success, img = cam.read()

    # Détecter les objets dans l'image avec une seuil de confiance de 0.5
    classIds, confs, bbox = net.detect(img, confThreshold=0.5)
    print(classIds, bbox)

    # Si des objets sont détectés, dessiner des rectangles et afficher les noms des classes
    if len(classIds) != 0:
        for classId, confidence, box in zip(classIds.flatten(), confs.flatten(), bbox):
            # Dessiner un rectangle autour de l'objet détecté
            cv2.rectangle(img, box, color=(0, 255, 0), thickness=2)

            # Afficher le nom de la classe à côté du rectangle
            cv2.putText(img, classNames[classId - 1], (box[0] + 10, box[1] + 20),
                        cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), thickness=2)

    # Afficher l'image avec les rectangles et les noms des classes
    cv2.imshow('Output', img)

    # Attendre une petite période (1 milliseconde) pour permettre l'affichage
    cv2.waitKey(1)
